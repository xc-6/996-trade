diff --git a/node_modules/stock-api/dist/stocks/tencent/index.js b/node_modules/stock-api/dist/stocks/tencent/index.js
index e96a307..05d3a02 100644
--- a/node_modules/stock-api/dist/stocks/tencent/index.js
+++ b/node_modules/stock-api/dist/stocks/tencent/index.js
@@ -20,8 +20,8 @@ var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, ge
     });
 };
 var __generator = (this && this.__generator) || function (thisArg, body) {
-    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
-    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
+    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
+    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
     function verb(n) { return function (v) { return step([n, v]); }; }
     function step(op) {
         if (f) throw new TypeError("Generator is already executing.");
@@ -99,7 +99,7 @@ var Tencent = {
      */
     getStocks: function (codes) {
         return __awaiter(this, void 0, void 0, function () {
-            var transforms, url, res, body, rows;
+            var transforms, url, res, buffer, body, rows;
             return __generator(this, function (_a) {
                 switch (_a.label) {
                     case 0:
@@ -113,7 +113,16 @@ var Tencent = {
                         return [4 /*yield*/, fetch_1.default.get(url).responseType("blob")];
                     case 1:
                         res = _a.sent();
-                        body = iconv_1.default.decode(res.body, "gbk");
+                        buffer = res.body;
+                        if (!(buffer instanceof Blob)) return [3 /*break*/, 3];
+                        console.log(buffer);
+                        return [4 /*yield*/, buffer.arrayBuffer()];
+                    case 2:
+                        buffer = _a.sent();
+                        buffer = new Uint8Array(buffer);
+                        _a.label = 3;
+                    case 3:
+                        body = iconv_1.default.decode(buffer, "gbk");
                         rows = body.split(";\n");
                         return [2 /*return*/, codes.map(function (code, index) {
                                 var transform = new common_code_1.default().transform(code);
